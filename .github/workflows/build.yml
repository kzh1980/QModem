name: Build luci-app-qmodem-mwan using OpenWrt SDK

on:
  # 允许你手动在 Actions 页面点击 "Run workflow" 来触发
  workflow_dispatch:

jobs:
  build:
    # 在最新的 Ubuntu 系统上运行
    runs-on: ubuntu-latest

    # 使用 OpenWrt 官方提供的、预装好所有依赖的 Docker 镜像作为编译环境
    container:
      image: openwrt/sdk
      # 添加此选项，以 root 用户身份运行容器内的所有步骤，从根本上解决权限问题
      options: --user root

    steps:
    # 第 1 步：下载你自己的 QModem 仓库代码
    - name: Checkout QModem repository (your code)
      uses: actions/checkout@v4
      with:
        path: qmodem

    # 第 2 步：准备编译环境，将你的项目作为“自定义软件源”添加进去
    - name: Prepare build environment
      run: |
        # 进入 SDK 环境的根目录
        cd /home/build/openwrt
        
        # 将你的 QModem/luci 目录添加为名叫 qmodem 的自定义软件源
        # 使用 github.workspace 变量确保路径的正确性
        echo 'src-link qmodem ${{ github.workspace }}/qmodem/luci' >> feeds.conf.default
        
        # 更新所有软件源
        ./scripts/feeds update -a
        
        # 安装 qmodem 软件源里的所有软件包
        ./scripts/feeds install -a -p qmodem
        
        # 生成默认的编译配置文件
        make defconfig

    # 第 3 步：开始编译你的插件！
    - name: Compile the package
      run: |
        # 进入 SDK 环境的根目录
        cd /home/build/openwrt
        
        # -j1 表示单线程编译，可以避免一些潜在的错误，也让日志更清晰
        make package/luci-app-qmodem-mwan/compile V=s -j1

    # 第 4 步：上传编译好的 .ipk 文件
    - name: Upload IPK artifact
      uses: actions/upload-artifact@v4
      with:
        name: luci-app-qmodem-mwan-ipk-sdk
        path: /home/build/openwrt/bin/packages/x86_64/luci/luci-app-qmodem-mwan_*.ipk
